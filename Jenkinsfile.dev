pipeline {
    agent any

    parameters {
        string(name: 'AWS_DEFAULT_REGION', defaultValue: 'us-east-1', description: 'Región de AWS')
        string(name: 'CREDENTIALS_ID', description: 'ID de las credenciales de AWS_ACCESS_KEY_ID')
        string(name: 'SECRET_CREDENTIALS_ID', description: 'ID de las credenciales de AWS_SECRET_ACCESS_KEY')
    }

    environment {
        TERRAFORM_EXECUTABLE = '/usr/bin/terraform'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                    executeTerraform('init')
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    executeTerraform('plan')
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    executeTerraform('apply')
                }
            }
        }

        stage('Destroy Terraform Resources') {
            steps {
                script {
                    input message: '¿Quieres destruir los recursos de Terraform?', ok: 'Destruir'
                    executeTerraform('destroy')
                }
            }
        }
    }
}

def executeTerraform(command) {
    try {
        withCredentials([
            [credentialsId: params.CREDENTIALS_ID, variable: 'AWS_ACCESS_KEY_ID'],
            [credentialsId: params.SECRET_CREDENTIALS_ID, variable: 'AWS_SECRET_ACCESS_KEY']
        ]) {
            sh """
                AWS_DEFAULT_REGION=${params.AWS_DEFAULT_REGION}
                ${env.TERRAFORM_EXECUTABLE} ${command} --auto-approve -no-color
            """
        }
    } catch (Exception e) {
        echo "Error occurred during Terraform ${command}: ${e}"
        currentBuild.result = 'FAILURE'
    }
}
