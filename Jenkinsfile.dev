pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        TERRAFORM_EXECUTABLE = '/usr/bin/terraform'
        CREDENTIALS_ID = 'AWS_ACCESS_KEY_ID'
        SECRET_CREDENTIALS_ID = 'AWS_SECRET_ACCESS_KEY'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                    executeTerraform('init')
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    executeTerraform('plan')
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    executeTerraform('apply')
                }
            }
        }

        stage('Destroy Terraform Resources') {
            steps {
                script {
                    input message: 'Â¿Quieres destruir los recursos de Terraform?', ok: 'Destruir'
                    executeTerraform('destroy')
                }
            }
        }
    }
}

def executeTerraform(command) {
    try {
        withCredentials([
            [credentialsId: env.CREDENTIALS_ID, variable: 'AWS_ACCESS_KEY_ID'],
            [credentialsId: env.SECRET_CREDENTIALS_ID, variable: 'AWS_SECRET_ACCESS_KEY']
        ]) {
            sh """
                ${env.TERRAFORM_EXECUTABLE} ${command} --auto-approve -no-color
            """
        }
    } catch (Exception e) {
        echo "Error occurred during Terraform ${command}: ${e}"
        currentBuild.result = 'FAILURE'
    }
}
